/*
 * generated by Xtext 2.33.0
 */
package org.example.helloweb.ide.contentassist.antlr;

import com.google.common.collect.ImmutableMap;
import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.Map;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;
import org.example.helloweb.ide.contentassist.antlr.internal.InternalHelloWebParser;
import org.example.helloweb.services.HelloWebGrammarAccess;

public class HelloWebParser extends AbstractContentAssistParser {

	@Singleton
	public static final class NameMappings {
		
		private final Map<AbstractElement, String> mappings;
		
		@Inject
		public NameMappings(HelloWebGrammarAccess grammarAccess) {
			ImmutableMap.Builder<AbstractElement, String> builder = ImmutableMap.builder();
			init(builder, grammarAccess);
			this.mappings = builder.build();
		}
		
		public String getRuleName(AbstractElement element) {
			return mappings.get(element);
		}
		
		private static void init(ImmutableMap.Builder<AbstractElement, String> builder, HelloWebGrammarAccess grammarAccess) {
			builder.put(grammarAccess.getSensorConfigAccess().getAlternatives(), "rule__SensorConfig__Alternatives");
			builder.put(grammarAccess.getConditionAccess().getAlternatives(), "rule__Condition__Alternatives");
			builder.put(grammarAccess.getNestedLogicalConditionAccess().getOperatorAlternatives_3_0(), "rule__NestedLogicalCondition__OperatorAlternatives_3_0");
			builder.put(grammarAccess.getComparisonValueAccess().getAlternatives(), "rule__ComparisonValue__Alternatives");
			builder.put(grammarAccess.getTimeUnitAccess().getAlternatives_1(), "rule__TimeUnit__Alternatives_1");
			builder.put(grammarAccess.getComparisonOperatorAccess().getAlternatives(), "rule__ComparisonOperator__Alternatives");
			builder.put(grammarAccess.getSensorAccess().getGroup(), "rule__Sensor__Group__0");
			builder.put(grammarAccess.getSensorAccess().getGroup_5(), "rule__Sensor__Group_5__0");
			builder.put(grammarAccess.getSensorAccess().getGroup_10(), "rule__Sensor__Group_10__0");
			builder.put(grammarAccess.getSensorAccess().getGroup_13(), "rule__Sensor__Group_13__0");
			builder.put(grammarAccess.getDeviceTypeAccess().getGroup(), "rule__DeviceType__Group__0");
			builder.put(grammarAccess.getDeviceTypeAccess().getGroup_4(), "rule__DeviceType__Group_4__0");
			builder.put(grammarAccess.getDeviceTypeAccess().getGroup_5(), "rule__DeviceType__Group_5__0");
			builder.put(grammarAccess.getDeviceTypeAccess().getGroup_6(), "rule__DeviceType__Group_6__0");
			builder.put(grammarAccess.getSensorInstantiationAccess().getGroup(), "rule__SensorInstantiation__Group__0");
			builder.put(grammarAccess.getSensorInstantiationAccess().getGroup_5(), "rule__SensorInstantiation__Group_5__0");
			builder.put(grammarAccess.getSensorInstantiationAccess().getGroup_6(), "rule__SensorInstantiation__Group_6__0");
			builder.put(grammarAccess.getConstraintAccess().getGroup(), "rule__Constraint__Group__0");
			builder.put(grammarAccess.getConstraintAccess().getGroup_4(), "rule__Constraint__Group_4__0");
			builder.put(grammarAccess.getNestedLogicalConditionAccess().getGroup(), "rule__NestedLogicalCondition__Group__0");
			builder.put(grammarAccess.getComparisonAccess().getGroup(), "rule__Comparison__Group__0");
			builder.put(grammarAccess.getComparisonValueAccess().getGroup_2(), "rule__ComparisonValue__Group_2__0");
			builder.put(grammarAccess.getValueRefAccess().getGroup(), "rule__ValueRef__Group__0");
			builder.put(grammarAccess.getValueRefAccess().getGroup_0(), "rule__ValueRef__Group_0__0");
			builder.put(grammarAccess.getTimeUnitAccess().getGroup(), "rule__TimeUnit__Group__0");
			builder.put(grammarAccess.getDecimalAccess().getGroup(), "rule__Decimal__Group__0");
			builder.put(grammarAccess.getSensorConfigAccess().getSensorsAssignment_0(), "rule__SensorConfig__SensorsAssignment_0");
			builder.put(grammarAccess.getSensorConfigAccess().getDeviceTypesAssignment_1(), "rule__SensorConfig__DeviceTypesAssignment_1");
			builder.put(grammarAccess.getSensorAccess().getNameAssignment_1(), "rule__Sensor__NameAssignment_1");
			builder.put(grammarAccess.getSensorAccess().getUnitsAssignment_4(), "rule__Sensor__UnitsAssignment_4");
			builder.put(grammarAccess.getSensorAccess().getUnitsAssignment_5_1(), "rule__Sensor__UnitsAssignment_5_1");
			builder.put(grammarAccess.getSensorAccess().getReaderAssignment_7(), "rule__Sensor__ReaderAssignment_7");
			builder.put(grammarAccess.getSensorAccess().getPinsAssignment_9(), "rule__Sensor__PinsAssignment_9");
			builder.put(grammarAccess.getSensorAccess().getPinsAssignment_10_1(), "rule__Sensor__PinsAssignment_10_1");
			builder.put(grammarAccess.getSensorAccess().getOutAssignment_12(), "rule__Sensor__OutAssignment_12");
			builder.put(grammarAccess.getSensorAccess().getOutAssignment_13_1(), "rule__Sensor__OutAssignment_13_1");
			builder.put(grammarAccess.getDeviceTypeAccess().getNameAssignment_1(), "rule__DeviceType__NameAssignment_1");
			builder.put(grammarAccess.getDeviceTypeAccess().getSensorInstantiationsAssignment_3(), "rule__DeviceType__SensorInstantiationsAssignment_3");
			builder.put(grammarAccess.getDeviceTypeAccess().getBatchRatePolicyAssignment_4_1(), "rule__DeviceType__BatchRatePolicyAssignment_4_1");
			builder.put(grammarAccess.getDeviceTypeAccess().getBatchSizePolicyAssignment_5_1(), "rule__DeviceType__BatchSizePolicyAssignment_5_1");
			builder.put(grammarAccess.getDeviceTypeAccess().getHeartBeatPolicyAssignment_6_1(), "rule__DeviceType__HeartBeatPolicyAssignment_6_1");
			builder.put(grammarAccess.getSensorInstantiationAccess().getSensorAssignment_0(), "rule__SensorInstantiation__SensorAssignment_0");
			builder.put(grammarAccess.getSensorInstantiationAccess().getNameAssignment_1(), "rule__SensorInstantiation__NameAssignment_1");
			builder.put(grammarAccess.getSensorInstantiationAccess().getPinsAssignment_4(), "rule__SensorInstantiation__PinsAssignment_4");
			builder.put(grammarAccess.getSensorInstantiationAccess().getPinsAssignment_5_1(), "rule__SensorInstantiation__PinsAssignment_5_1");
			builder.put(grammarAccess.getSensorInstantiationAccess().getSamplingRateAssignment_6_1(), "rule__SensorInstantiation__SamplingRateAssignment_6_1");
			builder.put(grammarAccess.getSensorInstantiationAccess().getConstraintsAssignment_7(), "rule__SensorInstantiation__ConstraintsAssignment_7");
			builder.put(grammarAccess.getConstraintAccess().getConditionAssignment_1(), "rule__Constraint__ConditionAssignment_1");
			builder.put(grammarAccess.getConstraintAccess().getSamplingRateAssignment_4_1(), "rule__Constraint__SamplingRateAssignment_4_1");
			builder.put(grammarAccess.getNestedLogicalConditionAccess().getLeftAssignment_1(), "rule__NestedLogicalCondition__LeftAssignment_1");
			builder.put(grammarAccess.getNestedLogicalConditionAccess().getOperatorAssignment_3(), "rule__NestedLogicalCondition__OperatorAssignment_3");
			builder.put(grammarAccess.getNestedLogicalConditionAccess().getRightAssignment_5(), "rule__NestedLogicalCondition__RightAssignment_5");
			builder.put(grammarAccess.getComparisonAccess().getLeftAssignment_0(), "rule__Comparison__LeftAssignment_0");
			builder.put(grammarAccess.getComparisonAccess().getOperatorAssignment_1(), "rule__Comparison__OperatorAssignment_1");
			builder.put(grammarAccess.getComparisonAccess().getRightAssignment_2(), "rule__Comparison__RightAssignment_2");
			builder.put(grammarAccess.getComparisonValueAccess().getValueAssignment_2_1(), "rule__ComparisonValue__ValueAssignment_2_1");
			builder.put(grammarAccess.getValueRefAccess().getSensorInstantiationAssignment_0_0(), "rule__ValueRef__SensorInstantiationAssignment_0_0");
			builder.put(grammarAccess.getValueRefAccess().getOutAssignment_1(), "rule__ValueRef__OutAssignment_1");
			builder.put(grammarAccess.getOutputAccess().getNameAssignment(), "rule__Output__NameAssignment");
			builder.put(grammarAccess.getPinAccess().getNameAssignment(), "rule__Pin__NameAssignment");
			builder.put(grammarAccess.getSensorUnitAccess().getValueAssignment(), "rule__SensorUnit__ValueAssignment");
			builder.put(grammarAccess.getDecimalAccess().getLeftAssignment_0(), "rule__Decimal__LeftAssignment_0");
			builder.put(grammarAccess.getDecimalAccess().getRightAssignment_2(), "rule__Decimal__RightAssignment_2");
		}
	}
	
	@Inject
	private NameMappings nameMappings;

	@Inject
	private HelloWebGrammarAccess grammarAccess;

	@Override
	protected InternalHelloWebParser createParser() {
		InternalHelloWebParser result = new InternalHelloWebParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		return nameMappings.getRuleName(element);
	}

	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public HelloWebGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(HelloWebGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
	
	public NameMappings getNameMappings() {
		return nameMappings;
	}
	
	public void setNameMappings(NameMappings nameMappings) {
		this.nameMappings = nameMappings;
	}
}
