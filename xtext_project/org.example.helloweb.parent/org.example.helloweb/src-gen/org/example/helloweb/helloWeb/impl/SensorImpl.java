/**
 * generated by Xtext 2.33.0
 */
package org.example.helloweb.helloWeb.impl;

import java.util.Collection;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

import org.example.helloweb.helloWeb.HelloWebPackage;
import org.example.helloweb.helloWeb.Output;
import org.example.helloweb.helloWeb.Pin;
import org.example.helloweb.helloWeb.Sensor;
import org.example.helloweb.helloWeb.SensorUnit;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Sensor</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.example.helloweb.helloWeb.impl.SensorImpl#getName <em>Name</em>}</li>
 *   <li>{@link org.example.helloweb.helloWeb.impl.SensorImpl#getUnits <em>Units</em>}</li>
 *   <li>{@link org.example.helloweb.helloWeb.impl.SensorImpl#getReader <em>Reader</em>}</li>
 *   <li>{@link org.example.helloweb.helloWeb.impl.SensorImpl#getPins <em>Pins</em>}</li>
 *   <li>{@link org.example.helloweb.helloWeb.impl.SensorImpl#getOut <em>Out</em>}</li>
 * </ul>
 *
 * @generated
 */
public class SensorImpl extends MinimalEObjectImpl.Container implements Sensor
{
  /**
   * The default value of the '{@link #getName() <em>Name</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getName()
   * @generated
   * @ordered
   */
  protected static final String NAME_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getName() <em>Name</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getName()
   * @generated
   * @ordered
   */
  protected String name = NAME_EDEFAULT;

  /**
   * The cached value of the '{@link #getUnits() <em>Units</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getUnits()
   * @generated
   * @ordered
   */
  protected EList<SensorUnit> units;

  /**
   * The default value of the '{@link #getReader() <em>Reader</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getReader()
   * @generated
   * @ordered
   */
  protected static final String READER_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getReader() <em>Reader</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getReader()
   * @generated
   * @ordered
   */
  protected String reader = READER_EDEFAULT;

  /**
   * The cached value of the '{@link #getPins() <em>Pins</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getPins()
   * @generated
   * @ordered
   */
  protected EList<Pin> pins;

  /**
   * The cached value of the '{@link #getOut() <em>Out</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getOut()
   * @generated
   * @ordered
   */
  protected EList<Output> out;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected SensorImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return HelloWebPackage.Literals.SENSOR;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getName()
  {
    return name;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setName(String newName)
  {
    String oldName = name;
    name = newName;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, HelloWebPackage.SENSOR__NAME, oldName, name));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<SensorUnit> getUnits()
  {
    if (units == null)
    {
      units = new EObjectContainmentEList<SensorUnit>(SensorUnit.class, this, HelloWebPackage.SENSOR__UNITS);
    }
    return units;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getReader()
  {
    return reader;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setReader(String newReader)
  {
    String oldReader = reader;
    reader = newReader;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, HelloWebPackage.SENSOR__READER, oldReader, reader));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<Pin> getPins()
  {
    if (pins == null)
    {
      pins = new EObjectContainmentEList<Pin>(Pin.class, this, HelloWebPackage.SENSOR__PINS);
    }
    return pins;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<Output> getOut()
  {
    if (out == null)
    {
      out = new EObjectContainmentEList<Output>(Output.class, this, HelloWebPackage.SENSOR__OUT);
    }
    return out;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case HelloWebPackage.SENSOR__UNITS:
        return ((InternalEList<?>)getUnits()).basicRemove(otherEnd, msgs);
      case HelloWebPackage.SENSOR__PINS:
        return ((InternalEList<?>)getPins()).basicRemove(otherEnd, msgs);
      case HelloWebPackage.SENSOR__OUT:
        return ((InternalEList<?>)getOut()).basicRemove(otherEnd, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case HelloWebPackage.SENSOR__NAME:
        return getName();
      case HelloWebPackage.SENSOR__UNITS:
        return getUnits();
      case HelloWebPackage.SENSOR__READER:
        return getReader();
      case HelloWebPackage.SENSOR__PINS:
        return getPins();
      case HelloWebPackage.SENSOR__OUT:
        return getOut();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case HelloWebPackage.SENSOR__NAME:
        setName((String)newValue);
        return;
      case HelloWebPackage.SENSOR__UNITS:
        getUnits().clear();
        getUnits().addAll((Collection<? extends SensorUnit>)newValue);
        return;
      case HelloWebPackage.SENSOR__READER:
        setReader((String)newValue);
        return;
      case HelloWebPackage.SENSOR__PINS:
        getPins().clear();
        getPins().addAll((Collection<? extends Pin>)newValue);
        return;
      case HelloWebPackage.SENSOR__OUT:
        getOut().clear();
        getOut().addAll((Collection<? extends Output>)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case HelloWebPackage.SENSOR__NAME:
        setName(NAME_EDEFAULT);
        return;
      case HelloWebPackage.SENSOR__UNITS:
        getUnits().clear();
        return;
      case HelloWebPackage.SENSOR__READER:
        setReader(READER_EDEFAULT);
        return;
      case HelloWebPackage.SENSOR__PINS:
        getPins().clear();
        return;
      case HelloWebPackage.SENSOR__OUT:
        getOut().clear();
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case HelloWebPackage.SENSOR__NAME:
        return NAME_EDEFAULT == null ? name != null : !NAME_EDEFAULT.equals(name);
      case HelloWebPackage.SENSOR__UNITS:
        return units != null && !units.isEmpty();
      case HelloWebPackage.SENSOR__READER:
        return READER_EDEFAULT == null ? reader != null : !READER_EDEFAULT.equals(reader);
      case HelloWebPackage.SENSOR__PINS:
        return pins != null && !pins.isEmpty();
      case HelloWebPackage.SENSOR__OUT:
        return out != null && !out.isEmpty();
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (name: ");
    result.append(name);
    result.append(", reader: ");
    result.append(reader);
    result.append(')');
    return result.toString();
  }

} //SensorImpl
