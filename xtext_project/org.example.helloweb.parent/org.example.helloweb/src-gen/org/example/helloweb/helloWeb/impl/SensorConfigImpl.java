/**
 * generated by Xtext 2.33.0
 */
package org.example.helloweb.helloWeb.impl;

import java.util.Collection;

import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

import org.example.helloweb.helloWeb.DeviceType;
import org.example.helloweb.helloWeb.HelloWebPackage;
import org.example.helloweb.helloWeb.Sensor;
import org.example.helloweb.helloWeb.SensorConfig;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Sensor Config</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.example.helloweb.helloWeb.impl.SensorConfigImpl#getSensors <em>Sensors</em>}</li>
 *   <li>{@link org.example.helloweb.helloWeb.impl.SensorConfigImpl#getDeviceTypes <em>Device Types</em>}</li>
 * </ul>
 *
 * @generated
 */
public class SensorConfigImpl extends MinimalEObjectImpl.Container implements SensorConfig
{
  /**
   * The cached value of the '{@link #getSensors() <em>Sensors</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getSensors()
   * @generated
   * @ordered
   */
  protected EList<Sensor> sensors;

  /**
   * The cached value of the '{@link #getDeviceTypes() <em>Device Types</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getDeviceTypes()
   * @generated
   * @ordered
   */
  protected EList<DeviceType> deviceTypes;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected SensorConfigImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return HelloWebPackage.Literals.SENSOR_CONFIG;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<Sensor> getSensors()
  {
    if (sensors == null)
    {
      sensors = new EObjectContainmentEList<Sensor>(Sensor.class, this, HelloWebPackage.SENSOR_CONFIG__SENSORS);
    }
    return sensors;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<DeviceType> getDeviceTypes()
  {
    if (deviceTypes == null)
    {
      deviceTypes = new EObjectContainmentEList<DeviceType>(DeviceType.class, this, HelloWebPackage.SENSOR_CONFIG__DEVICE_TYPES);
    }
    return deviceTypes;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case HelloWebPackage.SENSOR_CONFIG__SENSORS:
        return ((InternalEList<?>)getSensors()).basicRemove(otherEnd, msgs);
      case HelloWebPackage.SENSOR_CONFIG__DEVICE_TYPES:
        return ((InternalEList<?>)getDeviceTypes()).basicRemove(otherEnd, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case HelloWebPackage.SENSOR_CONFIG__SENSORS:
        return getSensors();
      case HelloWebPackage.SENSOR_CONFIG__DEVICE_TYPES:
        return getDeviceTypes();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case HelloWebPackage.SENSOR_CONFIG__SENSORS:
        getSensors().clear();
        getSensors().addAll((Collection<? extends Sensor>)newValue);
        return;
      case HelloWebPackage.SENSOR_CONFIG__DEVICE_TYPES:
        getDeviceTypes().clear();
        getDeviceTypes().addAll((Collection<? extends DeviceType>)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case HelloWebPackage.SENSOR_CONFIG__SENSORS:
        getSensors().clear();
        return;
      case HelloWebPackage.SENSOR_CONFIG__DEVICE_TYPES:
        getDeviceTypes().clear();
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case HelloWebPackage.SENSOR_CONFIG__SENSORS:
        return sensors != null && !sensors.isEmpty();
      case HelloWebPackage.SENSOR_CONFIG__DEVICE_TYPES:
        return deviceTypes != null && !deviceTypes.isEmpty();
    }
    return super.eIsSet(featureID);
  }

} //SensorConfigImpl
