/**
 * generated by Xtext 2.31.0
 */
package org.example.helloweb.helloWeb.impl;

import java.util.Collection;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

import org.example.helloweb.helloWeb.DeviceType;
import org.example.helloweb.helloWeb.HelloWebPackage;
import org.example.helloweb.helloWeb.SensorInstantiation;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Device Type</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.example.helloweb.helloWeb.impl.DeviceTypeImpl#getName <em>Name</em>}</li>
 *   <li>{@link org.example.helloweb.helloWeb.impl.DeviceTypeImpl#getSensorInstantiations <em>Sensor Instantiations</em>}</li>
 *   <li>{@link org.example.helloweb.helloWeb.impl.DeviceTypeImpl#getBatchRatePolicy <em>Batch Rate Policy</em>}</li>
 *   <li>{@link org.example.helloweb.helloWeb.impl.DeviceTypeImpl#getBatchSizePolicy <em>Batch Size Policy</em>}</li>
 *   <li>{@link org.example.helloweb.helloWeb.impl.DeviceTypeImpl#getHeartBeatPolicy <em>Heart Beat Policy</em>}</li>
 * </ul>
 *
 * @generated
 */
public class DeviceTypeImpl extends MinimalEObjectImpl.Container implements DeviceType
{
  /**
   * The default value of the '{@link #getName() <em>Name</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getName()
   * @generated
   * @ordered
   */
  protected static final String NAME_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getName() <em>Name</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getName()
   * @generated
   * @ordered
   */
  protected String name = NAME_EDEFAULT;

  /**
   * The cached value of the '{@link #getSensorInstantiations() <em>Sensor Instantiations</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getSensorInstantiations()
   * @generated
   * @ordered
   */
  protected EList<SensorInstantiation> sensorInstantiations;

  /**
   * The default value of the '{@link #getBatchRatePolicy() <em>Batch Rate Policy</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getBatchRatePolicy()
   * @generated
   * @ordered
   */
  protected static final String BATCH_RATE_POLICY_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getBatchRatePolicy() <em>Batch Rate Policy</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getBatchRatePolicy()
   * @generated
   * @ordered
   */
  protected String batchRatePolicy = BATCH_RATE_POLICY_EDEFAULT;

  /**
   * The default value of the '{@link #getBatchSizePolicy() <em>Batch Size Policy</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getBatchSizePolicy()
   * @generated
   * @ordered
   */
  protected static final int BATCH_SIZE_POLICY_EDEFAULT = 0;

  /**
   * The cached value of the '{@link #getBatchSizePolicy() <em>Batch Size Policy</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getBatchSizePolicy()
   * @generated
   * @ordered
   */
  protected int batchSizePolicy = BATCH_SIZE_POLICY_EDEFAULT;

  /**
   * The default value of the '{@link #getHeartBeatPolicy() <em>Heart Beat Policy</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getHeartBeatPolicy()
   * @generated
   * @ordered
   */
  protected static final String HEART_BEAT_POLICY_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getHeartBeatPolicy() <em>Heart Beat Policy</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getHeartBeatPolicy()
   * @generated
   * @ordered
   */
  protected String heartBeatPolicy = HEART_BEAT_POLICY_EDEFAULT;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected DeviceTypeImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return HelloWebPackage.Literals.DEVICE_TYPE;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getName()
  {
    return name;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setName(String newName)
  {
    String oldName = name;
    name = newName;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, HelloWebPackage.DEVICE_TYPE__NAME, oldName, name));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<SensorInstantiation> getSensorInstantiations()
  {
    if (sensorInstantiations == null)
    {
      sensorInstantiations = new EObjectContainmentEList<SensorInstantiation>(SensorInstantiation.class, this, HelloWebPackage.DEVICE_TYPE__SENSOR_INSTANTIATIONS);
    }
    return sensorInstantiations;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getBatchRatePolicy()
  {
    return batchRatePolicy;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setBatchRatePolicy(String newBatchRatePolicy)
  {
    String oldBatchRatePolicy = batchRatePolicy;
    batchRatePolicy = newBatchRatePolicy;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, HelloWebPackage.DEVICE_TYPE__BATCH_RATE_POLICY, oldBatchRatePolicy, batchRatePolicy));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public int getBatchSizePolicy()
  {
    return batchSizePolicy;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setBatchSizePolicy(int newBatchSizePolicy)
  {
    int oldBatchSizePolicy = batchSizePolicy;
    batchSizePolicy = newBatchSizePolicy;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, HelloWebPackage.DEVICE_TYPE__BATCH_SIZE_POLICY, oldBatchSizePolicy, batchSizePolicy));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getHeartBeatPolicy()
  {
    return heartBeatPolicy;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setHeartBeatPolicy(String newHeartBeatPolicy)
  {
    String oldHeartBeatPolicy = heartBeatPolicy;
    heartBeatPolicy = newHeartBeatPolicy;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, HelloWebPackage.DEVICE_TYPE__HEART_BEAT_POLICY, oldHeartBeatPolicy, heartBeatPolicy));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case HelloWebPackage.DEVICE_TYPE__SENSOR_INSTANTIATIONS:
        return ((InternalEList<?>)getSensorInstantiations()).basicRemove(otherEnd, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case HelloWebPackage.DEVICE_TYPE__NAME:
        return getName();
      case HelloWebPackage.DEVICE_TYPE__SENSOR_INSTANTIATIONS:
        return getSensorInstantiations();
      case HelloWebPackage.DEVICE_TYPE__BATCH_RATE_POLICY:
        return getBatchRatePolicy();
      case HelloWebPackage.DEVICE_TYPE__BATCH_SIZE_POLICY:
        return getBatchSizePolicy();
      case HelloWebPackage.DEVICE_TYPE__HEART_BEAT_POLICY:
        return getHeartBeatPolicy();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case HelloWebPackage.DEVICE_TYPE__NAME:
        setName((String)newValue);
        return;
      case HelloWebPackage.DEVICE_TYPE__SENSOR_INSTANTIATIONS:
        getSensorInstantiations().clear();
        getSensorInstantiations().addAll((Collection<? extends SensorInstantiation>)newValue);
        return;
      case HelloWebPackage.DEVICE_TYPE__BATCH_RATE_POLICY:
        setBatchRatePolicy((String)newValue);
        return;
      case HelloWebPackage.DEVICE_TYPE__BATCH_SIZE_POLICY:
        setBatchSizePolicy((Integer)newValue);
        return;
      case HelloWebPackage.DEVICE_TYPE__HEART_BEAT_POLICY:
        setHeartBeatPolicy((String)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case HelloWebPackage.DEVICE_TYPE__NAME:
        setName(NAME_EDEFAULT);
        return;
      case HelloWebPackage.DEVICE_TYPE__SENSOR_INSTANTIATIONS:
        getSensorInstantiations().clear();
        return;
      case HelloWebPackage.DEVICE_TYPE__BATCH_RATE_POLICY:
        setBatchRatePolicy(BATCH_RATE_POLICY_EDEFAULT);
        return;
      case HelloWebPackage.DEVICE_TYPE__BATCH_SIZE_POLICY:
        setBatchSizePolicy(BATCH_SIZE_POLICY_EDEFAULT);
        return;
      case HelloWebPackage.DEVICE_TYPE__HEART_BEAT_POLICY:
        setHeartBeatPolicy(HEART_BEAT_POLICY_EDEFAULT);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case HelloWebPackage.DEVICE_TYPE__NAME:
        return NAME_EDEFAULT == null ? name != null : !NAME_EDEFAULT.equals(name);
      case HelloWebPackage.DEVICE_TYPE__SENSOR_INSTANTIATIONS:
        return sensorInstantiations != null && !sensorInstantiations.isEmpty();
      case HelloWebPackage.DEVICE_TYPE__BATCH_RATE_POLICY:
        return BATCH_RATE_POLICY_EDEFAULT == null ? batchRatePolicy != null : !BATCH_RATE_POLICY_EDEFAULT.equals(batchRatePolicy);
      case HelloWebPackage.DEVICE_TYPE__BATCH_SIZE_POLICY:
        return batchSizePolicy != BATCH_SIZE_POLICY_EDEFAULT;
      case HelloWebPackage.DEVICE_TYPE__HEART_BEAT_POLICY:
        return HEART_BEAT_POLICY_EDEFAULT == null ? heartBeatPolicy != null : !HEART_BEAT_POLICY_EDEFAULT.equals(heartBeatPolicy);
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (name: ");
    result.append(name);
    result.append(", batchRatePolicy: ");
    result.append(batchRatePolicy);
    result.append(", batchSizePolicy: ");
    result.append(batchSizePolicy);
    result.append(", heartBeatPolicy: ");
    result.append(heartBeatPolicy);
    result.append(')');
    return result.toString();
  }

} //DeviceTypeImpl
