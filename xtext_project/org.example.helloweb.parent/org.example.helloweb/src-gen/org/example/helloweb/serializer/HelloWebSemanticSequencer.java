/*
 * generated by Xtext 2.31.0
 */
package org.example.helloweb.serializer;

import com.google.inject.Inject;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;
import org.example.helloweb.helloWeb.Comparison;
import org.example.helloweb.helloWeb.ComparisonValue;
import org.example.helloweb.helloWeb.Constraint;
import org.example.helloweb.helloWeb.Decimal;
import org.example.helloweb.helloWeb.DeviceType;
import org.example.helloweb.helloWeb.HelloWebPackage;
import org.example.helloweb.helloWeb.NestedLogicalCondition;
import org.example.helloweb.helloWeb.Output;
import org.example.helloweb.helloWeb.Pin;
import org.example.helloweb.helloWeb.Sensor;
import org.example.helloweb.helloWeb.SensorConfig;
import org.example.helloweb.helloWeb.SensorInstantiation;
import org.example.helloweb.helloWeb.SensorUnit;
import org.example.helloweb.helloWeb.ValueRef;
import org.example.helloweb.services.HelloWebGrammarAccess;

@SuppressWarnings("all")
public class HelloWebSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private HelloWebGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == HelloWebPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case HelloWebPackage.COMPARISON:
				sequence_Comparison(context, (Comparison) semanticObject); 
				return; 
			case HelloWebPackage.COMPARISON_VALUE:
				sequence_ComparisonValue(context, (ComparisonValue) semanticObject); 
				return; 
			case HelloWebPackage.CONSTRAINT:
				sequence_Constraint(context, (Constraint) semanticObject); 
				return; 
			case HelloWebPackage.DECIMAL:
				sequence_Decimal(context, (Decimal) semanticObject); 
				return; 
			case HelloWebPackage.DEVICE_TYPE:
				sequence_DeviceType(context, (DeviceType) semanticObject); 
				return; 
			case HelloWebPackage.NESTED_LOGICAL_CONDITION:
				sequence_NestedLogicalCondition(context, (NestedLogicalCondition) semanticObject); 
				return; 
			case HelloWebPackage.OUTPUT:
				sequence_Output(context, (Output) semanticObject); 
				return; 
			case HelloWebPackage.PIN:
				sequence_Pin(context, (Pin) semanticObject); 
				return; 
			case HelloWebPackage.SENSOR:
				sequence_Sensor(context, (Sensor) semanticObject); 
				return; 
			case HelloWebPackage.SENSOR_CONFIG:
				sequence_SensorConfig(context, (SensorConfig) semanticObject); 
				return; 
			case HelloWebPackage.SENSOR_INSTANTIATION:
				sequence_SensorInstantiation(context, (SensorInstantiation) semanticObject); 
				return; 
			case HelloWebPackage.SENSOR_UNIT:
				sequence_SensorUnit(context, (SensorUnit) semanticObject); 
				return; 
			case HelloWebPackage.VALUE_REF:
				sequence_ValueRef(context, (ValueRef) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * <pre>
	 * Contexts:
	 *     ComparisonValue returns ComparisonValue
	 *
	 * Constraint:
	 *     value=INT
	 * </pre>
	 */
	protected void sequence_ComparisonValue(ISerializationContext context, ComparisonValue semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, HelloWebPackage.Literals.COMPARISON_VALUE__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, HelloWebPackage.Literals.COMPARISON_VALUE__VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getComparisonValueAccess().getValueINTTerminalRuleCall_2_1_0(), semanticObject.getValue());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Condition returns Comparison
	 *     Comparison returns Comparison
	 *
	 * Constraint:
	 *     (left=ComparisonValue operator=ComparisonOperator right=ComparisonValue)
	 * </pre>
	 */
	protected void sequence_Comparison(ISerializationContext context, Comparison semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, HelloWebPackage.Literals.COMPARISON__LEFT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, HelloWebPackage.Literals.COMPARISON__LEFT));
			if (transientValues.isValueTransient(semanticObject, HelloWebPackage.Literals.CONDITION__OPERATOR) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, HelloWebPackage.Literals.CONDITION__OPERATOR));
			if (transientValues.isValueTransient(semanticObject, HelloWebPackage.Literals.COMPARISON__RIGHT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, HelloWebPackage.Literals.COMPARISON__RIGHT));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getComparisonAccess().getLeftComparisonValueParserRuleCall_0_0(), semanticObject.getLeft());
		feeder.accept(grammarAccess.getComparisonAccess().getOperatorComparisonOperatorParserRuleCall_1_0(), semanticObject.getOperator());
		feeder.accept(grammarAccess.getComparisonAccess().getRightComparisonValueParserRuleCall_2_0(), semanticObject.getRight());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Constraint returns Constraint
	 *
	 * Constraint:
	 *     (condition=Condition samplingRate=TimeUnit?)
	 * </pre>
	 */
	protected void sequence_Constraint(ISerializationContext context, Constraint semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     ComparisonValue returns Decimal
	 *     Decimal returns Decimal
	 *
	 * Constraint:
	 *     (left=INT right=INT)
	 * </pre>
	 */
	protected void sequence_Decimal(ISerializationContext context, Decimal semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, HelloWebPackage.Literals.DECIMAL__LEFT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, HelloWebPackage.Literals.DECIMAL__LEFT));
			if (transientValues.isValueTransient(semanticObject, HelloWebPackage.Literals.DECIMAL__RIGHT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, HelloWebPackage.Literals.DECIMAL__RIGHT));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getDecimalAccess().getLeftINTTerminalRuleCall_0_0(), semanticObject.getLeft());
		feeder.accept(grammarAccess.getDecimalAccess().getRightINTTerminalRuleCall_2_0(), semanticObject.getRight());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     DeviceType returns DeviceType
	 *
	 * Constraint:
	 *     (name=ID sensorInstantiations+=SensorInstantiation* batchRatePolicy=TimeUnit? batchSizePolicy=INT? heartBeatPolicy=TimeUnit?)
	 * </pre>
	 */
	protected void sequence_DeviceType(ISerializationContext context, DeviceType semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Condition returns NestedLogicalCondition
	 *     NestedLogicalCondition returns NestedLogicalCondition
	 *
	 * Constraint:
	 *     (left=Condition (operator='AND' | operator='OR' | operator='NOT') right=Condition)
	 * </pre>
	 */
	protected void sequence_NestedLogicalCondition(ISerializationContext context, NestedLogicalCondition semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Output returns Output
	 *
	 * Constraint:
	 *     name=ID
	 * </pre>
	 */
	protected void sequence_Output(ISerializationContext context, Output semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, HelloWebPackage.Literals.OUTPUT__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, HelloWebPackage.Literals.OUTPUT__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getOutputAccess().getNameIDTerminalRuleCall_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Pin returns Pin
	 *
	 * Constraint:
	 *     name=ID
	 * </pre>
	 */
	protected void sequence_Pin(ISerializationContext context, Pin semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, HelloWebPackage.Literals.PIN__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, HelloWebPackage.Literals.PIN__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getPinAccess().getNameIDTerminalRuleCall_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     SensorConfig returns SensorConfig
	 *
	 * Constraint:
	 *     (sensors+=Sensor | deviceTypes+=DeviceType)+
	 * </pre>
	 */
	protected void sequence_SensorConfig(ISerializationContext context, SensorConfig semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     SensorInstantiation returns SensorInstantiation
	 *
	 * Constraint:
	 *     (
	 *         sensor=[Sensor|ID] 
	 *         name=ID 
	 *         pins+=INT 
	 *         pins+=INT* 
	 *         samplingRate=TimeUnit? 
	 *         constraints+=Constraint*
	 *     )
	 * </pre>
	 */
	protected void sequence_SensorInstantiation(ISerializationContext context, SensorInstantiation semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     SensorUnit returns SensorUnit
	 *
	 * Constraint:
	 *     value=ID
	 * </pre>
	 */
	protected void sequence_SensorUnit(ISerializationContext context, SensorUnit semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, HelloWebPackage.Literals.SENSOR_UNIT__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, HelloWebPackage.Literals.SENSOR_UNIT__VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getSensorUnitAccess().getValueIDTerminalRuleCall_0(), semanticObject.getValue());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Sensor returns Sensor
	 *
	 * Constraint:
	 *     (
	 *         name=ID 
	 *         units+=SensorUnit 
	 *         units+=SensorUnit* 
	 *         reader=ID 
	 *         pins+=Pin 
	 *         pins+=Pin* 
	 *         out+=Output 
	 *         out+=Output*
	 *     )
	 * </pre>
	 */
	protected void sequence_Sensor(ISerializationContext context, Sensor semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     ComparisonValue returns ValueRef
	 *     ValueRef returns ValueRef
	 *
	 * Constraint:
	 *     (sensorInstantiation=[SensorInstantiation|ID]? out=ID)
	 * </pre>
	 */
	protected void sequence_ValueRef(ISerializationContext context, ValueRef semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
}
