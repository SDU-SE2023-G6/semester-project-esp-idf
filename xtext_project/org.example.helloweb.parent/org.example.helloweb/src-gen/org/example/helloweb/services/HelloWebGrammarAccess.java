/*
 * generated by Xtext 2.33.0
 */
package org.example.helloweb.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class HelloWebGrammarAccess extends AbstractElementFinder.AbstractGrammarElementFinder {
	
	public class SensorConfigElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.example.helloweb.HelloWeb.SensorConfig");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cSensorsAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cSensorsSensorParserRuleCall_0_0 = (RuleCall)cSensorsAssignment_0.eContents().get(0);
		private final Assignment cDeviceTypesAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cDeviceTypesDeviceTypeParserRuleCall_1_0 = (RuleCall)cDeviceTypesAssignment_1.eContents().get(0);
		
		//SensorConfig:
		//    (sensors+=Sensor | deviceTypes+=DeviceType)*;
		@Override public ParserRule getRule() { return rule; }
		
		//(sensors+=Sensor | deviceTypes+=DeviceType)*
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//sensors+=Sensor
		public Assignment getSensorsAssignment_0() { return cSensorsAssignment_0; }
		
		//Sensor
		public RuleCall getSensorsSensorParserRuleCall_0_0() { return cSensorsSensorParserRuleCall_0_0; }
		
		//deviceTypes+=DeviceType
		public Assignment getDeviceTypesAssignment_1() { return cDeviceTypesAssignment_1; }
		
		//DeviceType
		public RuleCall getDeviceTypesDeviceTypeParserRuleCall_1_0() { return cDeviceTypesDeviceTypeParserRuleCall_1_0; }
	}
	public class SensorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.example.helloweb.HelloWeb.Sensor");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSensorKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cUnitsKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cUnitsAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cUnitsSensorUnitParserRuleCall_4_0 = (RuleCall)cUnitsAssignment_4.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cCommaKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cUnitsAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cUnitsSensorUnitParserRuleCall_5_1_0 = (RuleCall)cUnitsAssignment_5_1.eContents().get(0);
		private final Keyword cReaderKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cReaderAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cReaderIDTerminalRuleCall_7_0 = (RuleCall)cReaderAssignment_7.eContents().get(0);
		private final Keyword cPinsKeyword_8 = (Keyword)cGroup.eContents().get(8);
		private final Assignment cPinsAssignment_9 = (Assignment)cGroup.eContents().get(9);
		private final RuleCall cPinsPinParserRuleCall_9_0 = (RuleCall)cPinsAssignment_9.eContents().get(0);
		private final Group cGroup_10 = (Group)cGroup.eContents().get(10);
		private final Keyword cCommaKeyword_10_0 = (Keyword)cGroup_10.eContents().get(0);
		private final Assignment cPinsAssignment_10_1 = (Assignment)cGroup_10.eContents().get(1);
		private final RuleCall cPinsPinParserRuleCall_10_1_0 = (RuleCall)cPinsAssignment_10_1.eContents().get(0);
		private final Keyword cOutKeyword_11 = (Keyword)cGroup.eContents().get(11);
		private final Assignment cOutAssignment_12 = (Assignment)cGroup.eContents().get(12);
		private final RuleCall cOutOutputParserRuleCall_12_0 = (RuleCall)cOutAssignment_12.eContents().get(0);
		private final Group cGroup_13 = (Group)cGroup.eContents().get(13);
		private final Keyword cCommaKeyword_13_0 = (Keyword)cGroup_13.eContents().get(0);
		private final Assignment cOutAssignment_13_1 = (Assignment)cGroup_13.eContents().get(1);
		private final RuleCall cOutOutputParserRuleCall_13_1_0 = (RuleCall)cOutAssignment_13_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_14 = (Keyword)cGroup.eContents().get(14);
		
		//Sensor:
		//    'sensor' name=ID '{'
		//        'units:' units+=SensorUnit (',' units+=SensorUnit)*
		//        'reader:' reader=ID
		//        'pins:' pins+=Pin (',' pins+=Pin)*
		//        'out:' out+=Output (',' out+=Output)*
		//    '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'sensor' name=ID '{'
		//    'units:' units+=SensorUnit (',' units+=SensorUnit)*
		//    'reader:' reader=ID
		//    'pins:' pins+=Pin (',' pins+=Pin)*
		//    'out:' out+=Output (',' out+=Output)*
		//'}'
		public Group getGroup() { return cGroup; }
		
		//'sensor'
		public Keyword getSensorKeyword_0() { return cSensorKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//'units:'
		public Keyword getUnitsKeyword_3() { return cUnitsKeyword_3; }
		
		//units+=SensorUnit
		public Assignment getUnitsAssignment_4() { return cUnitsAssignment_4; }
		
		//SensorUnit
		public RuleCall getUnitsSensorUnitParserRuleCall_4_0() { return cUnitsSensorUnitParserRuleCall_4_0; }
		
		//(',' units+=SensorUnit)*
		public Group getGroup_5() { return cGroup_5; }
		
		//','
		public Keyword getCommaKeyword_5_0() { return cCommaKeyword_5_0; }
		
		//units+=SensorUnit
		public Assignment getUnitsAssignment_5_1() { return cUnitsAssignment_5_1; }
		
		//SensorUnit
		public RuleCall getUnitsSensorUnitParserRuleCall_5_1_0() { return cUnitsSensorUnitParserRuleCall_5_1_0; }
		
		//'reader:'
		public Keyword getReaderKeyword_6() { return cReaderKeyword_6; }
		
		//reader=ID
		public Assignment getReaderAssignment_7() { return cReaderAssignment_7; }
		
		//ID
		public RuleCall getReaderIDTerminalRuleCall_7_0() { return cReaderIDTerminalRuleCall_7_0; }
		
		//'pins:'
		public Keyword getPinsKeyword_8() { return cPinsKeyword_8; }
		
		//pins+=Pin
		public Assignment getPinsAssignment_9() { return cPinsAssignment_9; }
		
		//Pin
		public RuleCall getPinsPinParserRuleCall_9_0() { return cPinsPinParserRuleCall_9_0; }
		
		//(',' pins+=Pin)*
		public Group getGroup_10() { return cGroup_10; }
		
		//','
		public Keyword getCommaKeyword_10_0() { return cCommaKeyword_10_0; }
		
		//pins+=Pin
		public Assignment getPinsAssignment_10_1() { return cPinsAssignment_10_1; }
		
		//Pin
		public RuleCall getPinsPinParserRuleCall_10_1_0() { return cPinsPinParserRuleCall_10_1_0; }
		
		//'out:'
		public Keyword getOutKeyword_11() { return cOutKeyword_11; }
		
		//out+=Output
		public Assignment getOutAssignment_12() { return cOutAssignment_12; }
		
		//Output
		public RuleCall getOutOutputParserRuleCall_12_0() { return cOutOutputParserRuleCall_12_0; }
		
		//(',' out+=Output)*
		public Group getGroup_13() { return cGroup_13; }
		
		//','
		public Keyword getCommaKeyword_13_0() { return cCommaKeyword_13_0; }
		
		//out+=Output
		public Assignment getOutAssignment_13_1() { return cOutAssignment_13_1; }
		
		//Output
		public RuleCall getOutOutputParserRuleCall_13_1_0() { return cOutOutputParserRuleCall_13_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_14() { return cRightCurlyBracketKeyword_14; }
	}
	public class DeviceTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.example.helloweb.HelloWeb.DeviceType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDeviceTypeKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cSensorInstantiationsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cSensorInstantiationsSensorInstantiationParserRuleCall_3_0 = (RuleCall)cSensorInstantiationsAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cBatchRatePolicyKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cBatchRatePolicyAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cBatchRatePolicyTimeUnitParserRuleCall_4_1_0 = (RuleCall)cBatchRatePolicyAssignment_4_1.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cBatchSizePolicyKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cBatchSizePolicyAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cBatchSizePolicyINTTerminalRuleCall_5_1_0 = (RuleCall)cBatchSizePolicyAssignment_5_1.eContents().get(0);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Keyword cHeartBeatPolicyKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Assignment cHeartBeatPolicyAssignment_6_1 = (Assignment)cGroup_6.eContents().get(1);
		private final RuleCall cHeartBeatPolicyTimeUnitParserRuleCall_6_1_0 = (RuleCall)cHeartBeatPolicyAssignment_6_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//DeviceType:
		//    'deviceType' name=ID '{'
		//        (sensorInstantiations+=SensorInstantiation)*
		//        ('batchRatePolicy:' batchRatePolicy=TimeUnit)?
		//        ('batchSizePolicy:' batchSizePolicy=INT)?
		//        ('heartBeatPolicy:' heartBeatPolicy=TimeUnit)?
		//    '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'deviceType' name=ID '{'
		//    (sensorInstantiations+=SensorInstantiation)*
		//    ('batchRatePolicy:' batchRatePolicy=TimeUnit)?
		//    ('batchSizePolicy:' batchSizePolicy=INT)?
		//    ('heartBeatPolicy:' heartBeatPolicy=TimeUnit)?
		//'}'
		public Group getGroup() { return cGroup; }
		
		//'deviceType'
		public Keyword getDeviceTypeKeyword_0() { return cDeviceTypeKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//(sensorInstantiations+=SensorInstantiation)*
		public Assignment getSensorInstantiationsAssignment_3() { return cSensorInstantiationsAssignment_3; }
		
		//SensorInstantiation
		public RuleCall getSensorInstantiationsSensorInstantiationParserRuleCall_3_0() { return cSensorInstantiationsSensorInstantiationParserRuleCall_3_0; }
		
		//('batchRatePolicy:' batchRatePolicy=TimeUnit)?
		public Group getGroup_4() { return cGroup_4; }
		
		//'batchRatePolicy:'
		public Keyword getBatchRatePolicyKeyword_4_0() { return cBatchRatePolicyKeyword_4_0; }
		
		//batchRatePolicy=TimeUnit
		public Assignment getBatchRatePolicyAssignment_4_1() { return cBatchRatePolicyAssignment_4_1; }
		
		//TimeUnit
		public RuleCall getBatchRatePolicyTimeUnitParserRuleCall_4_1_0() { return cBatchRatePolicyTimeUnitParserRuleCall_4_1_0; }
		
		//('batchSizePolicy:' batchSizePolicy=INT)?
		public Group getGroup_5() { return cGroup_5; }
		
		//'batchSizePolicy:'
		public Keyword getBatchSizePolicyKeyword_5_0() { return cBatchSizePolicyKeyword_5_0; }
		
		//batchSizePolicy=INT
		public Assignment getBatchSizePolicyAssignment_5_1() { return cBatchSizePolicyAssignment_5_1; }
		
		//INT
		public RuleCall getBatchSizePolicyINTTerminalRuleCall_5_1_0() { return cBatchSizePolicyINTTerminalRuleCall_5_1_0; }
		
		//('heartBeatPolicy:' heartBeatPolicy=TimeUnit)?
		public Group getGroup_6() { return cGroup_6; }
		
		//'heartBeatPolicy:'
		public Keyword getHeartBeatPolicyKeyword_6_0() { return cHeartBeatPolicyKeyword_6_0; }
		
		//heartBeatPolicy=TimeUnit
		public Assignment getHeartBeatPolicyAssignment_6_1() { return cHeartBeatPolicyAssignment_6_1; }
		
		//TimeUnit
		public RuleCall getHeartBeatPolicyTimeUnitParserRuleCall_6_1_0() { return cHeartBeatPolicyTimeUnitParserRuleCall_6_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_7() { return cRightCurlyBracketKeyword_7; }
	}
	public class SensorInstantiationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.example.helloweb.HelloWeb.SensorInstantiation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cSensorAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cSensorSensorCrossReference_0_0 = (CrossReference)cSensorAssignment_0.eContents().get(0);
		private final RuleCall cSensorSensorIDTerminalRuleCall_0_0_1 = (RuleCall)cSensorSensorCrossReference_0_0.eContents().get(1);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cPinsKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cPinsAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cPinsINTTerminalRuleCall_4_0 = (RuleCall)cPinsAssignment_4.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cCommaKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cPinsAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cPinsINTTerminalRuleCall_5_1_0 = (RuleCall)cPinsAssignment_5_1.eContents().get(0);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Keyword cSamplingRateKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Assignment cSamplingRateAssignment_6_1 = (Assignment)cGroup_6.eContents().get(1);
		private final RuleCall cSamplingRateTimeUnitParserRuleCall_6_1_0 = (RuleCall)cSamplingRateAssignment_6_1.eContents().get(0);
		private final Assignment cConstraintsAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cConstraintsConstraintParserRuleCall_7_0 = (RuleCall)cConstraintsAssignment_7.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_8 = (Keyword)cGroup.eContents().get(8);
		
		//SensorInstantiation:
		//    sensor=[Sensor] name=ID '{'
		//        'pins:' pins+=INT (',' pins+=INT)*
		//        ('samplingRate:' samplingRate=TimeUnit)?
		//        (constraints+=Constraint)*
		//    '}';
		@Override public ParserRule getRule() { return rule; }
		
		//sensor=[Sensor] name=ID '{'
		//    'pins:' pins+=INT (',' pins+=INT)*
		//    ('samplingRate:' samplingRate=TimeUnit)?
		//    (constraints+=Constraint)*
		//'}'
		public Group getGroup() { return cGroup; }
		
		//sensor=[Sensor]
		public Assignment getSensorAssignment_0() { return cSensorAssignment_0; }
		
		//[Sensor]
		public CrossReference getSensorSensorCrossReference_0_0() { return cSensorSensorCrossReference_0_0; }
		
		//ID
		public RuleCall getSensorSensorIDTerminalRuleCall_0_0_1() { return cSensorSensorIDTerminalRuleCall_0_0_1; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//'pins:'
		public Keyword getPinsKeyword_3() { return cPinsKeyword_3; }
		
		//pins+=INT
		public Assignment getPinsAssignment_4() { return cPinsAssignment_4; }
		
		//INT
		public RuleCall getPinsINTTerminalRuleCall_4_0() { return cPinsINTTerminalRuleCall_4_0; }
		
		//(',' pins+=INT)*
		public Group getGroup_5() { return cGroup_5; }
		
		//','
		public Keyword getCommaKeyword_5_0() { return cCommaKeyword_5_0; }
		
		//pins+=INT
		public Assignment getPinsAssignment_5_1() { return cPinsAssignment_5_1; }
		
		//INT
		public RuleCall getPinsINTTerminalRuleCall_5_1_0() { return cPinsINTTerminalRuleCall_5_1_0; }
		
		//('samplingRate:' samplingRate=TimeUnit)?
		public Group getGroup_6() { return cGroup_6; }
		
		//'samplingRate:'
		public Keyword getSamplingRateKeyword_6_0() { return cSamplingRateKeyword_6_0; }
		
		//samplingRate=TimeUnit
		public Assignment getSamplingRateAssignment_6_1() { return cSamplingRateAssignment_6_1; }
		
		//TimeUnit
		public RuleCall getSamplingRateTimeUnitParserRuleCall_6_1_0() { return cSamplingRateTimeUnitParserRuleCall_6_1_0; }
		
		//(constraints+=Constraint)*
		public Assignment getConstraintsAssignment_7() { return cConstraintsAssignment_7; }
		
		//Constraint
		public RuleCall getConstraintsConstraintParserRuleCall_7_0() { return cConstraintsConstraintParserRuleCall_7_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_8() { return cRightCurlyBracketKeyword_8; }
	}
	public class ConstraintElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.example.helloweb.HelloWeb.Constraint");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cConditionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cConditionConditionParserRuleCall_1_0 = (RuleCall)cConditionAssignment_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cSamplingRateKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cSamplingRateAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cSamplingRateTimeUnitParserRuleCall_4_1_0 = (RuleCall)cSamplingRateAssignment_4_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//Constraint:
		//    '(' condition=Condition ')' '{'
		//        ('samplingRate:' samplingRate=TimeUnit)?
		//    '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'(' condition=Condition ')' '{'
		//    ('samplingRate:' samplingRate=TimeUnit)?
		//'}'
		public Group getGroup() { return cGroup; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_0() { return cLeftParenthesisKeyword_0; }
		
		//condition=Condition
		public Assignment getConditionAssignment_1() { return cConditionAssignment_1; }
		
		//Condition
		public RuleCall getConditionConditionParserRuleCall_1_0() { return cConditionConditionParserRuleCall_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_2() { return cRightParenthesisKeyword_2; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }
		
		//('samplingRate:' samplingRate=TimeUnit)?
		public Group getGroup_4() { return cGroup_4; }
		
		//'samplingRate:'
		public Keyword getSamplingRateKeyword_4_0() { return cSamplingRateKeyword_4_0; }
		
		//samplingRate=TimeUnit
		public Assignment getSamplingRateAssignment_4_1() { return cSamplingRateAssignment_4_1; }
		
		//TimeUnit
		public RuleCall getSamplingRateTimeUnitParserRuleCall_4_1_0() { return cSamplingRateTimeUnitParserRuleCall_4_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}
	public class ConditionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.example.helloweb.HelloWeb.Condition");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cComparisonParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cNestedLogicalConditionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Condition:
		//    Comparison | NestedLogicalCondition;
		@Override public ParserRule getRule() { return rule; }
		
		//Comparison | NestedLogicalCondition
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Comparison
		public RuleCall getComparisonParserRuleCall_0() { return cComparisonParserRuleCall_0; }
		
		//NestedLogicalCondition
		public RuleCall getNestedLogicalConditionParserRuleCall_1() { return cNestedLogicalConditionParserRuleCall_1; }
	}
	public class NestedLogicalConditionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.example.helloweb.HelloWeb.NestedLogicalCondition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cLeftAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cLeftConditionParserRuleCall_1_0 = (RuleCall)cLeftAssignment_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cOperatorAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final Alternatives cOperatorAlternatives_3_0 = (Alternatives)cOperatorAssignment_3.eContents().get(0);
		private final Keyword cOperatorANDKeyword_3_0_0 = (Keyword)cOperatorAlternatives_3_0.eContents().get(0);
		private final Keyword cOperatorORKeyword_3_0_1 = (Keyword)cOperatorAlternatives_3_0.eContents().get(1);
		private final Keyword cOperatorNOTKeyword_3_0_2 = (Keyword)cOperatorAlternatives_3_0.eContents().get(2);
		private final Keyword cLeftParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cRightAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cRightConditionParserRuleCall_5_0 = (RuleCall)cRightAssignment_5.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//NestedLogicalCondition:
		//    '(' left=Condition ')' operator=('AND' | 'OR' | 'NOT') '(' right=Condition ')';
		@Override public ParserRule getRule() { return rule; }
		
		//'(' left=Condition ')' operator=('AND' | 'OR' | 'NOT') '(' right=Condition ')'
		public Group getGroup() { return cGroup; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_0() { return cLeftParenthesisKeyword_0; }
		
		//left=Condition
		public Assignment getLeftAssignment_1() { return cLeftAssignment_1; }
		
		//Condition
		public RuleCall getLeftConditionParserRuleCall_1_0() { return cLeftConditionParserRuleCall_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_2() { return cRightParenthesisKeyword_2; }
		
		//operator=('AND' | 'OR' | 'NOT')
		public Assignment getOperatorAssignment_3() { return cOperatorAssignment_3; }
		
		//('AND' | 'OR' | 'NOT')
		public Alternatives getOperatorAlternatives_3_0() { return cOperatorAlternatives_3_0; }
		
		//'AND'
		public Keyword getOperatorANDKeyword_3_0_0() { return cOperatorANDKeyword_3_0_0; }
		
		//'OR'
		public Keyword getOperatorORKeyword_3_0_1() { return cOperatorORKeyword_3_0_1; }
		
		//'NOT'
		public Keyword getOperatorNOTKeyword_3_0_2() { return cOperatorNOTKeyword_3_0_2; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_4() { return cLeftParenthesisKeyword_4; }
		
		//right=Condition
		public Assignment getRightAssignment_5() { return cRightAssignment_5; }
		
		//Condition
		public RuleCall getRightConditionParserRuleCall_5_0() { return cRightConditionParserRuleCall_5_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_6() { return cRightParenthesisKeyword_6; }
	}
	public class ComparisonElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.example.helloweb.HelloWeb.Comparison");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cLeftAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cLeftComparisonValueParserRuleCall_0_0 = (RuleCall)cLeftAssignment_0.eContents().get(0);
		private final Assignment cOperatorAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cOperatorComparisonOperatorParserRuleCall_1_0 = (RuleCall)cOperatorAssignment_1.eContents().get(0);
		private final Assignment cRightAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cRightComparisonValueParserRuleCall_2_0 = (RuleCall)cRightAssignment_2.eContents().get(0);
		
		//Comparison:
		//    left=ComparisonValue operator=ComparisonOperator right=ComparisonValue;
		@Override public ParserRule getRule() { return rule; }
		
		//left=ComparisonValue operator=ComparisonOperator right=ComparisonValue
		public Group getGroup() { return cGroup; }
		
		//left=ComparisonValue
		public Assignment getLeftAssignment_0() { return cLeftAssignment_0; }
		
		//ComparisonValue
		public RuleCall getLeftComparisonValueParserRuleCall_0_0() { return cLeftComparisonValueParserRuleCall_0_0; }
		
		//operator=ComparisonOperator
		public Assignment getOperatorAssignment_1() { return cOperatorAssignment_1; }
		
		//ComparisonOperator
		public RuleCall getOperatorComparisonOperatorParserRuleCall_1_0() { return cOperatorComparisonOperatorParserRuleCall_1_0; }
		
		//right=ComparisonValue
		public Assignment getRightAssignment_2() { return cRightAssignment_2; }
		
		//ComparisonValue
		public RuleCall getRightComparisonValueParserRuleCall_2_0() { return cRightComparisonValueParserRuleCall_2_0; }
	}
	public class ComparisonValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.example.helloweb.HelloWeb.ComparisonValue");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cValueRefParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cDecimalParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Action cComparisonValueAction_2_0 = (Action)cGroup_2.eContents().get(0);
		private final Assignment cValueAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cValueINTTerminalRuleCall_2_1_0 = (RuleCall)cValueAssignment_2_1.eContents().get(0);
		
		//ComparisonValue:
		//    ValueRef | Decimal | {ComparisonValue} value=INT;
		@Override public ParserRule getRule() { return rule; }
		
		//ValueRef | Decimal | {ComparisonValue} value=INT
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//ValueRef
		public RuleCall getValueRefParserRuleCall_0() { return cValueRefParserRuleCall_0; }
		
		//Decimal
		public RuleCall getDecimalParserRuleCall_1() { return cDecimalParserRuleCall_1; }
		
		//{ComparisonValue} value=INT
		public Group getGroup_2() { return cGroup_2; }
		
		//{ComparisonValue}
		public Action getComparisonValueAction_2_0() { return cComparisonValueAction_2_0; }
		
		//value=INT
		public Assignment getValueAssignment_2_1() { return cValueAssignment_2_1; }
		
		//INT
		public RuleCall getValueINTTerminalRuleCall_2_1_0() { return cValueINTTerminalRuleCall_2_1_0; }
	}
	public class ValueRefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.example.helloweb.HelloWeb.ValueRef");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cGroup.eContents().get(0);
		private final Assignment cSensorInstantiationAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final CrossReference cSensorInstantiationSensorInstantiationCrossReference_0_0_0 = (CrossReference)cSensorInstantiationAssignment_0_0.eContents().get(0);
		private final RuleCall cSensorInstantiationSensorInstantiationIDTerminalRuleCall_0_0_0_1 = (RuleCall)cSensorInstantiationSensorInstantiationCrossReference_0_0_0.eContents().get(1);
		private final Keyword cFullStopKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Assignment cOutAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cOutIDTerminalRuleCall_1_0 = (RuleCall)cOutAssignment_1.eContents().get(0);
		
		//ValueRef:
		//    (sensorInstantiation=[SensorInstantiation] '.')? out=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//(sensorInstantiation=[SensorInstantiation] '.')? out=ID
		public Group getGroup() { return cGroup; }
		
		//(sensorInstantiation=[SensorInstantiation] '.')?
		public Group getGroup_0() { return cGroup_0; }
		
		//sensorInstantiation=[SensorInstantiation]
		public Assignment getSensorInstantiationAssignment_0_0() { return cSensorInstantiationAssignment_0_0; }
		
		//[SensorInstantiation]
		public CrossReference getSensorInstantiationSensorInstantiationCrossReference_0_0_0() { return cSensorInstantiationSensorInstantiationCrossReference_0_0_0; }
		
		//ID
		public RuleCall getSensorInstantiationSensorInstantiationIDTerminalRuleCall_0_0_0_1() { return cSensorInstantiationSensorInstantiationIDTerminalRuleCall_0_0_0_1; }
		
		//'.'
		public Keyword getFullStopKeyword_0_1() { return cFullStopKeyword_0_1; }
		
		//out=ID
		public Assignment getOutAssignment_1() { return cOutAssignment_1; }
		
		//ID
		public RuleCall getOutIDTerminalRuleCall_1_0() { return cOutIDTerminalRuleCall_1_0; }
	}
	public class OutputElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.example.helloweb.HelloWeb.Output");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_0 = (RuleCall)cNameAssignment.eContents().get(0);
		
		//Output:
		//    name=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID
		public Assignment getNameAssignment() { return cNameAssignment; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0() { return cNameIDTerminalRuleCall_0; }
	}
	public class PinElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.example.helloweb.HelloWeb.Pin");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_0 = (RuleCall)cNameAssignment.eContents().get(0);
		
		//Pin:
		//    name=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID
		public Assignment getNameAssignment() { return cNameAssignment; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0() { return cNameIDTerminalRuleCall_0; }
	}
	public class SensorUnitElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.example.helloweb.HelloWeb.SensorUnit");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValueIDTerminalRuleCall_0 = (RuleCall)cValueAssignment.eContents().get(0);
		
		//SensorUnit:
		//    value=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//value=ID
		public Assignment getValueAssignment() { return cValueAssignment; }
		
		//ID
		public RuleCall getValueIDTerminalRuleCall_0() { return cValueIDTerminalRuleCall_0; }
	}
	public class TimeUnitElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.example.helloweb.HelloWeb.TimeUnit");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cINTTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Keyword cSKeyword_1_0 = (Keyword)cAlternatives_1.eContents().get(0);
		private final Keyword cMKeyword_1_1 = (Keyword)cAlternatives_1.eContents().get(1);
		private final Keyword cHKeyword_1_2 = (Keyword)cAlternatives_1.eContents().get(2);
		private final Keyword cDKeyword_1_3 = (Keyword)cAlternatives_1.eContents().get(3);
		
		//TimeUnit:
		//    INT ('s' | 'm' | 'h' | 'd');
		@Override public ParserRule getRule() { return rule; }
		
		//INT ('s' | 'm' | 'h' | 'd')
		public Group getGroup() { return cGroup; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_0() { return cINTTerminalRuleCall_0; }
		
		//('s' | 'm' | 'h' | 'd')
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//'s'
		public Keyword getSKeyword_1_0() { return cSKeyword_1_0; }
		
		//'m'
		public Keyword getMKeyword_1_1() { return cMKeyword_1_1; }
		
		//'h'
		public Keyword getHKeyword_1_2() { return cHKeyword_1_2; }
		
		//'d'
		public Keyword getDKeyword_1_3() { return cDKeyword_1_3; }
	}
	public class DecimalElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.example.helloweb.HelloWeb.Decimal");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cLeftAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cLeftINTTerminalRuleCall_0_0 = (RuleCall)cLeftAssignment_0.eContents().get(0);
		private final Keyword cFullStopKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cRightAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cRightINTTerminalRuleCall_2_0 = (RuleCall)cRightAssignment_2.eContents().get(0);
		
		//Decimal:
		//    left=INT '.' right=INT;
		@Override public ParserRule getRule() { return rule; }
		
		//left=INT '.' right=INT
		public Group getGroup() { return cGroup; }
		
		//left=INT
		public Assignment getLeftAssignment_0() { return cLeftAssignment_0; }
		
		//INT
		public RuleCall getLeftINTTerminalRuleCall_0_0() { return cLeftINTTerminalRuleCall_0_0; }
		
		//'.'
		public Keyword getFullStopKeyword_1() { return cFullStopKeyword_1; }
		
		//right=INT
		public Assignment getRightAssignment_2() { return cRightAssignment_2; }
		
		//INT
		public RuleCall getRightINTTerminalRuleCall_2_0() { return cRightINTTerminalRuleCall_2_0; }
	}
	public class ComparisonOperatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.example.helloweb.HelloWeb.ComparisonOperator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cGreaterThanSignKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cLessThanSignKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cGreaterThanSignEqualsSignKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cLessThanSignEqualsSignKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		private final Keyword cEqualsSignKeyword_4 = (Keyword)cAlternatives.eContents().get(4);
		private final Keyword cExclamationMarkEqualsSignKeyword_5 = (Keyword)cAlternatives.eContents().get(5);
		
		//ComparisonOperator:
		//    '>' | '<' | '>=' | '<=' | '=' | '!=';
		@Override public ParserRule getRule() { return rule; }
		
		//'>' | '<' | '>=' | '<=' | '=' | '!='
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'>'
		public Keyword getGreaterThanSignKeyword_0() { return cGreaterThanSignKeyword_0; }
		
		//'<'
		public Keyword getLessThanSignKeyword_1() { return cLessThanSignKeyword_1; }
		
		//'>='
		public Keyword getGreaterThanSignEqualsSignKeyword_2() { return cGreaterThanSignEqualsSignKeyword_2; }
		
		//'<='
		public Keyword getLessThanSignEqualsSignKeyword_3() { return cLessThanSignEqualsSignKeyword_3; }
		
		//'='
		public Keyword getEqualsSignKeyword_4() { return cEqualsSignKeyword_4; }
		
		//'!='
		public Keyword getExclamationMarkEqualsSignKeyword_5() { return cExclamationMarkEqualsSignKeyword_5; }
	}
	
	
	private final SensorConfigElements pSensorConfig;
	private final SensorElements pSensor;
	private final DeviceTypeElements pDeviceType;
	private final SensorInstantiationElements pSensorInstantiation;
	private final ConstraintElements pConstraint;
	private final ConditionElements pCondition;
	private final NestedLogicalConditionElements pNestedLogicalCondition;
	private final ComparisonElements pComparison;
	private final ComparisonValueElements pComparisonValue;
	private final ValueRefElements pValueRef;
	private final OutputElements pOutput;
	private final PinElements pPin;
	private final SensorUnitElements pSensorUnit;
	private final TimeUnitElements pTimeUnit;
	private final DecimalElements pDecimal;
	private final ComparisonOperatorElements pComparisonOperator;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public HelloWebGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pSensorConfig = new SensorConfigElements();
		this.pSensor = new SensorElements();
		this.pDeviceType = new DeviceTypeElements();
		this.pSensorInstantiation = new SensorInstantiationElements();
		this.pConstraint = new ConstraintElements();
		this.pCondition = new ConditionElements();
		this.pNestedLogicalCondition = new NestedLogicalConditionElements();
		this.pComparison = new ComparisonElements();
		this.pComparisonValue = new ComparisonValueElements();
		this.pValueRef = new ValueRefElements();
		this.pOutput = new OutputElements();
		this.pPin = new PinElements();
		this.pSensorUnit = new SensorUnitElements();
		this.pTimeUnit = new TimeUnitElements();
		this.pDecimal = new DecimalElements();
		this.pComparisonOperator = new ComparisonOperatorElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.example.helloweb.HelloWeb".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//SensorConfig:
	//    (sensors+=Sensor | deviceTypes+=DeviceType)*;
	public SensorConfigElements getSensorConfigAccess() {
		return pSensorConfig;
	}
	
	public ParserRule getSensorConfigRule() {
		return getSensorConfigAccess().getRule();
	}
	
	//Sensor:
	//    'sensor' name=ID '{'
	//        'units:' units+=SensorUnit (',' units+=SensorUnit)*
	//        'reader:' reader=ID
	//        'pins:' pins+=Pin (',' pins+=Pin)*
	//        'out:' out+=Output (',' out+=Output)*
	//    '}';
	public SensorElements getSensorAccess() {
		return pSensor;
	}
	
	public ParserRule getSensorRule() {
		return getSensorAccess().getRule();
	}
	
	//DeviceType:
	//    'deviceType' name=ID '{'
	//        (sensorInstantiations+=SensorInstantiation)*
	//        ('batchRatePolicy:' batchRatePolicy=TimeUnit)?
	//        ('batchSizePolicy:' batchSizePolicy=INT)?
	//        ('heartBeatPolicy:' heartBeatPolicy=TimeUnit)?
	//    '}';
	public DeviceTypeElements getDeviceTypeAccess() {
		return pDeviceType;
	}
	
	public ParserRule getDeviceTypeRule() {
		return getDeviceTypeAccess().getRule();
	}
	
	//SensorInstantiation:
	//    sensor=[Sensor] name=ID '{'
	//        'pins:' pins+=INT (',' pins+=INT)*
	//        ('samplingRate:' samplingRate=TimeUnit)?
	//        (constraints+=Constraint)*
	//    '}';
	public SensorInstantiationElements getSensorInstantiationAccess() {
		return pSensorInstantiation;
	}
	
	public ParserRule getSensorInstantiationRule() {
		return getSensorInstantiationAccess().getRule();
	}
	
	//Constraint:
	//    '(' condition=Condition ')' '{'
	//        ('samplingRate:' samplingRate=TimeUnit)?
	//    '}';
	public ConstraintElements getConstraintAccess() {
		return pConstraint;
	}
	
	public ParserRule getConstraintRule() {
		return getConstraintAccess().getRule();
	}
	
	//Condition:
	//    Comparison | NestedLogicalCondition;
	public ConditionElements getConditionAccess() {
		return pCondition;
	}
	
	public ParserRule getConditionRule() {
		return getConditionAccess().getRule();
	}
	
	//NestedLogicalCondition:
	//    '(' left=Condition ')' operator=('AND' | 'OR' | 'NOT') '(' right=Condition ')';
	public NestedLogicalConditionElements getNestedLogicalConditionAccess() {
		return pNestedLogicalCondition;
	}
	
	public ParserRule getNestedLogicalConditionRule() {
		return getNestedLogicalConditionAccess().getRule();
	}
	
	//Comparison:
	//    left=ComparisonValue operator=ComparisonOperator right=ComparisonValue;
	public ComparisonElements getComparisonAccess() {
		return pComparison;
	}
	
	public ParserRule getComparisonRule() {
		return getComparisonAccess().getRule();
	}
	
	//ComparisonValue:
	//    ValueRef | Decimal | {ComparisonValue} value=INT;
	public ComparisonValueElements getComparisonValueAccess() {
		return pComparisonValue;
	}
	
	public ParserRule getComparisonValueRule() {
		return getComparisonValueAccess().getRule();
	}
	
	//ValueRef:
	//    (sensorInstantiation=[SensorInstantiation] '.')? out=ID;
	public ValueRefElements getValueRefAccess() {
		return pValueRef;
	}
	
	public ParserRule getValueRefRule() {
		return getValueRefAccess().getRule();
	}
	
	//Output:
	//    name=ID;
	public OutputElements getOutputAccess() {
		return pOutput;
	}
	
	public ParserRule getOutputRule() {
		return getOutputAccess().getRule();
	}
	
	//Pin:
	//    name=ID;
	public PinElements getPinAccess() {
		return pPin;
	}
	
	public ParserRule getPinRule() {
		return getPinAccess().getRule();
	}
	
	//SensorUnit:
	//    value=ID;
	public SensorUnitElements getSensorUnitAccess() {
		return pSensorUnit;
	}
	
	public ParserRule getSensorUnitRule() {
		return getSensorUnitAccess().getRule();
	}
	
	//TimeUnit:
	//    INT ('s' | 'm' | 'h' | 'd');
	public TimeUnitElements getTimeUnitAccess() {
		return pTimeUnit;
	}
	
	public ParserRule getTimeUnitRule() {
		return getTimeUnitAccess().getRule();
	}
	
	//Decimal:
	//    left=INT '.' right=INT;
	public DecimalElements getDecimalAccess() {
		return pDecimal;
	}
	
	public ParserRule getDecimalRule() {
		return getDecimalAccess().getRule();
	}
	
	//ComparisonOperator:
	//    '>' | '<' | '>=' | '<=' | '=' | '!=';
	public ComparisonOperatorElements getComparisonOperatorAccess() {
		return pComparisonOperator;
	}
	
	public ParserRule getComparisonOperatorRule() {
		return getComparisonOperatorAccess().getRule();
	}
	
	//terminal ID: '^'?('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt: ('0'..'9')+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//            '"' ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|'"') )* '"' |
	//            "'" ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|"'") )* "'"
	//        ;
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT : '/*' -> '*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT : '//' !('\n'|'\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS         : (' '|'\t'|'\r'|'\n')+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER: .;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
